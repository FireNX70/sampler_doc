S-7XX HDDs and CDs. L-CD7XX, L-CDC, L-CDP and L-CDX libraries.

Little-endian.

Known to use pre-emphasis.

Bizarrely; while the older S-550 had a proper (if basic) file system, the S-7XX
series seems to rely on a fairly rigid format.

The S-770's manual claims a maximum capacity of 128 volumes, 512 performances,
1024 patches, 4096 partials and 8192 samples per HDD. This lines up with the
spacing for the different sections on the disk images I've checked.
The maximum size of an S-7XX FS is 0x2429A800 (606709760) bytes, or 592490 KB
The maximum capacity for audio is 65524 segments (603869184 B).

Differences between the normal S-7XX HDD format and the S-760's are as follows:
	1. "S-760 System Disk" as opposed to "SYS-772 HardDisk Sys" at 0x11 within
	   the header's text. The version string still starts at 0x26 (from the
	   start of the text).
	
	2. The audio section starts later. This was done to accommodate extra OS
	   data. Technically, 0x2B5800 is still treated as the start of the audio
	   section but audio data is written starting at segment 0x72 (treated as
	   0x74 by the FAT).
	
	3. The OS sections are padded with 0xFF (as opposed to 0xCF23) when the HDD
	   does not contain an OS.
	
	4. Performances may contain the extra performance data in the unused part of
	   the 16-bit index block.
	   
	5. The S-760 can write sound data to normal S-7XX HDDs, but not its OS.


Header at 0.
TOC at 0x100.
OS at 0x800.
Audio FAT at 0x80800.
Volume list at 0xA0800.
Performance list at 0xA1800.
Patch list at 0xA5800.
Partial list at 0xAD800.
Sample list at 0xCD800.
Volume parameters at 0x10D800.
Performance parameters at 0x115800.
Patch parameters at 0x155800.
Partial parameters at 0x1D5800.
Sample parameters at 0x255800.
Audio data starts at 0x2B5800 or 0x3B6000 (S-760).


The header is the same as in the floppy format.

Header (96 B)
	0x00: 0s, 4 bytes.
	0x04: Machine name, 10 chars.
	0x0E: Padding, 1 byte.
	0x0F: Media type, 1 byte enum.
	0x10: Text, 80 chars. Sys. ver, copyright, etc.
	
	The first 4 bytes do need to be 0 for the sampler to recognize the FS (at
	least on the S-760).

	Machine name is always "S770 MR25A". It's the magic.
	
	The text appears to be the only reliable way to tell whether an HDD without
	an OS was formatted by an S-760 or an older S-7XX. Text from other S-7XX
	machines will contain "SYS-772" at 0x11 (from the start of the text). An
	S-760 will write "S-760" there. The only real incompatibility between both
	variants is the OS, which is why the S-760 uses a different media type value
	for its HDDs with an OS to begin with.


Media type
	HDD, //also used for CDs
	HDD_with_OS = 0x20,
	DSDD_SYS_770 = 0x31,
	DSHD_diskette,
	DSDD_diskette,
	HDD_with_OS_S760 = 0x40,
	DSHD_SYS_760 = 0x50
	
	The media types used by CDs are identical to those used by HDDs. Other
	media, like SyQuest or Zip disks, probably also use it. The manual makes it
	sound like tape is only used for backups, but I haven't done any testing
	with tapes.


TOC (32 B)
	0x00: Disk name, 16 chars.
	0x10: Block count, 24-bit uint. 512 B blocks.
	0x13: Unsure, 1 byte. Likely the top byte to the block count, but always
		  unused.
	0x14: Volume count, 16-bit uint.
	0x16: Performance count, 16-bit uint.
	0x18: Patch count, 16-bit uint.
	0x1A: Partial count, 16-bit uint.
	0x1C: Sample count, 16-bit uint.
	0x1E: Padding, 2 bytes.
	
	Block count is for the whole FS (including header, fixed sections, etc.).
	Modifying the block count does not affect the available time displayed by
	the sampler, it is actually directly controlled by a variable in the FAT.
	Reinitializing the FS will result in the block count being set back to take
	up all available space if previously modified.


The OS is stored at 0x800 through 0x807FF. On the S-760; more OS data is stored
starting at 0x2B5800, where the audio data would usually start, and ending at
0x3317FF. Loading volumes into memory and then writing the OS to disk affects
the saved OS.


FAT
	0x00000: FAT, 16-bit uint entries. Max 65526 entries.
	0x1FFEC: Unused, 20 bytes. Most are 0xFF, some are 0xFE.
	
	Like in most FAT filesystems, the first two slots are not usable and hold
	special values.
	Slot 0 is always 0xFFFA.
	Slot 1 tracks the number of remaining free segments.
	
	The FAT's only used for audio and uses a fixed cluster size of 9216 (same as
	the diskettes' segment size). Index 2 is the start of data. The maximum
	index value for data is 0xFFF5. 0 indicates a free segment. 0xFFF8 is the
	end-of-chain marker. The S-760 marks the segments taken up by the OS (the
	first 114 segments) with 0xFFFE (first half) and 0xFFFD (second half).
	
	Modifying the free segment count does directly affect the displayed
	remaining time. Even if the block count doesn't match, recalculating the
	available time did not alter the free segment count (nor the displayed
	time).


List entry (32 B)
	0x00: Name, 16 chars.
	0x10: Element type, 1 byte enum.
	0x11: Unknown, 1 byte. Usually 0.
	0x12: Next index, 16-bit uint. +0x8000 offset. 0xFFFF if last entry.
	0x14: Previous index, 16-bit uint. +0x8000 offset. 0xFFFF if first entry.
	0x16: Current index, 16-bit uint. No offset.
	0x18: Unknown, 3 bytes. Seems to always be 0.
	0x1B: Program number, 8-bit uint. Only used by volumes. Range 64 to 127
		  (displayed as 65 to 128), with 0 (library CDs) and 0x3F (S-760)
		  displyed as disabled. Performances appear to use this for something
		  too, but there doesn't seem to be a way to edit it from the sampler.
	0x1C: Start segment, 16-bit uint. Only used by samples.
	0x1F: Segment count, 16-bit uint. Used by pretty much everything.
	
	The name's first character determines whether an entry is free/deleted. Both
	0 and 0xFE mark free slots. 0xFE only affects that entry. 0 means both that
	entry and all subsequent entries are free.

	I'm not sure why the element type variable exists. It's not like you could
	have lists with entries of different types, so it's completely redundant.
	Perhaps they intended to make a proper filesystem originally? I used to
	think it controlled whether a slot was free, but it doesn't seem to be the
	case. Not when displaying the lists, not when counting for the TOC, not when
	saving files.
	
	On the LCDP libraries, what I have called indices behave in a sane way. In
	the first entry, next index would be 0x8001, prev index would be 0xFFFF and
	current index would be 0. Then, in the second entry; next index would be
	0x8002, prev index would be 0x8000 and current index would be 1. If I
	deleted an entry, the previous entry would correctly point to the next one
	and vice-versa.
	However, when I tested with the CF these indices were all over the place.
	For example, the first two entries would list 0x8000 as the previous index.
	Appending a volume (via a copy) would result in the second-to-last entry
	listing 0xFFFF as the next index and the newly added performance listing
	both the next and previous indices as 0xFFFF.
	These being all set to 0 did not appear to lead to any problems even on
	large lists containing deleted/free slots.


Element types
	volume = 0x40,
	performance,
	patch,
	partial,
	sample


Volume (256 B)
	0x00: Name, 16 chars.
	0x10: Padding, 16 bytes. Always 0.
	0x20: 16-bit absolute indices to performances. 112 entries. Unused entries
		  padded with 0xFFFF.


Performance (512 B)
	0x000: Normal performance data, 256 bytes. See diskette format.
	0x100: 16-bit absolute indices to patches, 32 entries (64 bytes). Unused
		   entries marked with 0xFFFF.
	0x140: Padding, 64 bytes. 0xFF.
	0x17F: Extra performance parameters flag, 1 byte. 0 if extra performance
		   parameters present. 0xFF otherwise.
	0x180: Normal S-760 extra performance parameters, 100 bytes. S-760 only,
		   padded with 0xFF otherwise. See diskette format.
	0x1E4: Padding, 28 bytes. 0xFF.


Patch (512 B)
	0x000: Normal patch data, 256 bytes. See diskette format.
	0x100: 16-bit absolute indices to partials. 128 entries. Unused entries
		   padded with 0xFFFF. The first 88 indices are mapped to the "key
		   partial map". The "key partial map" usually contains copies of these
		   indices' lower bytes.


It's strange that they chose to keep the data structures identical to the
diskette format's and to just append an entire half-block's worth of data for
the 16-bit indices.

Partials and samples are identical to the diskette format's.
Partials already use 16-bit indices in the diskette format.
Samples already used 16-bit segment counts. As for their start segments, "start
segment" and "disk index" are both 0 on all samples on the disks I've checked.
It would appear that the start segment from the list is used instead. It's
likely that the segment count from the list is also used instead of the sample's
own.


Deleting a volume, performance, etc. will overwrite most of its list entry with
0s and its parameters entry with 0xFF. The first byte of the list entry's name
will not be set to 0 but to 0xFE. The FAT will see any segments corresponding to
deleted samples marked with 0, just like normal free segments.
Care must be taken when loading a list to account for empty slots within it (for
example, the TOC listing 88 samples doesn't mean they'll occupy slots 0 - 87).
The list entry's name's first char must be checked for 0 or 0xFE.

Lower level elements can be deleted even if in use by higher level elements
(i.e. a sample can be deleted even if used by a partial, a partial can be
deleted even if used by a patch, etc.). Higher level elements will be left
untouched, they will still reference the now-free slots. Changes to the segment
counts will not propagate upward.

Other deletion-related tests I performed are described below.
Loading three partials, one that uses a deleted sample (now an empty sample
slot), one that uses a sample before it and one using a sample after it, will
see the corresponding sample entry disabled in the partial that referenced the
deleted sample while the other two partials will still use the correct samples.
Looking through the sample menu, no free slots are left in memory. Despite the
disk load menu displaying a contiguous list without free slots, saving a sample
inserts it into the free slot. Returning to the load menu will display it where
the free slot would have been. Loading the three partials again, the one that
referenced the empty slot will now load and use the newly saved sample while the
other two still use their corresponding samples. This behavior appears
unaffected by list indices ("List entry" 0x12, 0x14 and 0x16). I tested both
with unmodified and zeroed indices. When inserting the sample into the list with
zeroed indices, next index and prev index both were 0xFFFF and current index was
0.
