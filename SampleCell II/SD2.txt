Preexisting documentation here:
	https://www.lim.di.unimi.it/IEEE/DGDES/SDII.HTM
I used it for the data structures for loops and markers.

Also, it turns out libsndfile (https://github.com/libsndfile/libsndfile) has
been able to work with SD2 files since at least 2004. According to libsndfile
(specifically, docs/formats.md and src/sd2.c), 8-bit audio is signed in SD2.


SoundDesigner II files, identified by FILP chunks as "Sd2f". These rely on the
HFS resource fork for all of their metadata (the data fork contains only audio).
In order to preserve the resource fork, I've been working with these within
MacBinaryII containers.

MacBinaryII is documented here:
	https://files.stairways.com/other/macbinaryii-standard-info.txt

The resource fork is documented in its own file.

Uses the following resources:
	Type: "STR "
		ID: 1000, Name: "sample-size"
			String representing the sample size in bytes (integer).

		ID: 1001, Name: "sample-rate"
			String representing the sample rate in hertz (with decimals).

		ID: 1002, Name: "channels"
			String representing the channel count (integer).

		ID: 2356, Name: "midi-note"
			String representing the MIDI note (integer).

	Type: "sdML"
		ID: 1000, Name: "Markers"
			Binary marker data.

	Type: "sdLL"
		ID: 1000, Name: "Loops"
			Binary loop data.

	Type: "ddRL"
		ID: 1000, Name: none
			Unknown.


STR
	"STR " resources are all standard Pascal strings (without padding).

	"midi-note" isn't always present. Even when it's there, it seems to be wrong
	quite often. Pretty much every single sample I checked had this set to "60",
	which would correspond to C4, even when the sample's name explicitly stated
	it was a different note. I guess the actual note should be derived from
	instruments using the sample, since the root note values from those actually
	match the samples' filenames. SampleCell Editor 2.1.3's manual does mention
	defaulting to C4 for SDII files.


I haven't been able to find any files actually using markers, so I can't provide
a whole lot of information on them.


sdLL
	0x00: uint32. Size. Might be uint24, so it would be at 0x01.
	0x04: uint16. Version. Observed version was 1.
	0x06: uint16. Horizontal scale. Probably for window, so irrelevant.
	0x08: uint16. Vertical scale. Probably for window, so irrelevant.
	0x0A: uint16. Loop count.
	0x0C: Loop entries.


sdLL loop entry
	0x00: uint32. Start.
	0x04: uint32. End.
	0x08: uint16. Index.
	0x0A: uint16 (enum). Loop type.
	0x0C: uint16. Channel.

	Loops appear to use a value of 1 as the first index. Loops on mono samples
	use a channel value of 0. It seems stereo samples use a single loop for both
	channels, with the loop marked as being for channel 0.


Loop type enum
	forward = 117,
	alternating


Stereo samples interleave channels.
