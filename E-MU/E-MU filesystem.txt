E-MU filesystem. Shared by both the EIII and EIV families.

This documentation was produced by referencing David García Goñi's emu3fs code
(https://github.com/dagargo/emu3fs) and inspecting CD and HDD images, plus some
of my own testing.

512B blocks. Little-endian.

The filesystem is the same for both the EIII and EIV families.

The filesystem is made up of 6 sections:
	Header
	Block 1
	FAT
	Dir list
	File list
	Data

These sections are usually found in the same order as the list.

Header
	0x000: 0x45 0x4D 0x55 0x33 ("EMU3", magic)
	0x004: Block count (u32) for the whole filesystem. Doesn't seem to actually
		   match the image size, at least on CD images.
	0x008: Directory list block address (u32). On EIII filesystems, there's only
		   one directory.
	0x00C: Directory list block count (u32).
	0x010: File list block address (u32).
	0x014: File list block count (u32).
	0x018: FAT block address (u32).
	0x01C: FAT block count (u32).
	0x020: Data section block address (u32).
	0x024: Cluster count (u32, likely u16). Does not count the first (unusable)
		   cluster. The size from the base of the FAT is this + DATA_MIN (1).
	0x028: Cluster shift (u8).
	0x029: Unknown, 1 byte. Seems to always be 1.
	0x02A: Unknown, 4 bytes. Sometimes contains what looks like a copy of the
		   filesystem's block count with a slightly different value. It seems to
		   line up better with the end of the padding and the start of the zeroes
		   on some CD images. On one EIV filesystem, this looked like a
		   big-endian copy of the filesystem's block count. On most EIV
		   filesystems, it's just 0x80000000 (actually in LE order on-disk).
	0x02E: Unknown, 4 bytes. Seems to always be all 0s.
	0x032: Unknown. Seems to always be 1.
	0x033: Unknown. Seems to always be 0x0D.
	0x034: Unknown, 2 bytes. Sometimes are 1 and sometimes are 0. Are these flags
		   of some sort?
	0x036: Most likely unused, 456 bytes. Looks like it's always all 0s.
	0x1FE: Checksum, 16-bit.

	Min cluster size of 32KB. Min cluster shift is 15, a cluster shift value of
	0 equates to 15. Cluster size is 1 << (cluster_shift + 15). Max cluster
	shift total should be 24 (so 9 on-disk), see the file struct's
	documentation.


Block 1 starts with the value of the next available block for directory
contents. 32-bit seems wasteful, since directories use 16-bit ints for the block
addresses; but it looks like a 32-bit int, considering padding for the rest
block 1. This number should NOT be trusted, although it should still be kept
up-to-date. See the documentation on directories for more information.
The rest of the block is filled with 0x80 or 0.


Next is the FAT. It's usually located at block 2 (0x400), although apparently
it's relocatable. Cluster indices are 16-bit. Special values are 0x0000 (free
cluster), 0x7FFF (EOF) and 0x8000 (reserved cluster). Any value between 1 and
0x7FFE marks that a cluster is in use and which cluster is next. The FAT itself
is 0-based, but as per usual DATA_MIN (in this case 1) corresponds to the start
of data (which in turn is determined by the header's "Data section block
address").
Because the FAT's size will always be a multiple of 512; if the cluster count
isn't a multiple of 256 (16-bit indices) minus one (first cluster is always
reserved and does not count toward the cluster count), any leftover space will
be filled with 0x8000.

Testing on an E4 shows that it tries to keep the FAT at a size of about 4 blocks
(1023 clusters), increasing the cluster size instead. Going from a 512MB drive
to a 2GB one yielded a quadrupling of the cluster size while the cluster count
stayed very similar. Moving to a 4GB drive showed similar behavior, with the
cluster size now doubling and the cluster count staying nearly the same.


The directory list is made up of 32-byte entries, where each one is a directory.
Again, on EIII filesystems it seems there's usually only one directory.

The maximum number of directories a filesystem may contain varies depending on
the filesystem's size. EMU's EOS manual claims a 1GB disk may hold up to 96
directories.
On a 512MB drive, the directory list was 3 blocks in size. When moving to a 2GB
drive, this section grew to take up 7 blocks (112 directories). It then stayed
the same size when moving to a drive slightly smaller than 4GB. Testing with a
drive exactly 4GB in size had only the file list and cluster count grow, with
everything else staying the exact same size. Finally, a hard drive which was
slightly larger than 4GB had the directory list take up one less block because
it grew the FAT by one block while leaving the cluster size the same. If the
directory list is treated like a root directory of sorts, it makes sense the
size would be capped at 7 blocks like it is for regular directories.

Directory
	0x00: Directory name. 16 chars long.
	0x10: Unknown.
	0x11: Type (1 byte enum). 0 (free), 0x40 (last) or 0x80 (normal).
	0x12: Block addresses, 7 unsigned 16-bit entries. Absolute, 0-based. Should
		  be part of the file list. The files listed in those blocks belong to
		  this directory. 0xFFFF seems to be used as padding, but I guess any
		  value that doesn't fall within the file list's blocks would count as
		  such.

	Name behavior is somewhat inconsistent. The first directory's name ("Default
	Folder", which I think is created by mkfs) is padded with spaces all the way
	to the end. Other directories (created on an E4) are padded with spaces most
	of the way, but they're null-terminated unless the last character is in use.
	That last character can be any legal character (including spaces), and once
	it's in use it will not revert to a null.
	Furthermore, it appears there's very few restrictions on allowed characters,
	to the extent that a forward slash ('/') is perfectly legal; although my E4
	does not seem to react to '|' or '\'. I suppose forward slashes could be
	mapped to backslashes and back.
	EOS doesn't seem to have a problem working with directories with names
	padded with nulls.

	My E4 (running EOS 4.10a) does not do a particularly good job of keeping the
	last directory correctly marked. It marks it when creating directories
	initially, but deleting the last directory will not mark the new last one.
	Creating a new directory past the last one will not mark it as the last one
	either; so once the "last" mark is gone, it's gone for good. I've seen other
	filesystem images where it was missing, so this seems to be fairly common.
	Creating a backup through EOS' backup function will correctly mark the last
	directory in the backup, regardless of whether it's marked in the source.
	The source remains untouched.
	EOS will list existing directories even after a directory marked with type
	0x40 anyway, so this "last" type really doesn't seem all that special.

	On completely new directories, all blocks are marked 0xFFFF. EOS does not
	allocate any space for the directory's contents when making a directory. My
	assumption was new directories reusing deleted directory entries should
	reuse the old directory's blocks. However, I've seen my E4 (EOS 4.10a
	classic) consistently overwrite allocated block entries with 0xFFFF. Causing
	EOS to allocate a new dir content block did not reclaim the unused ones and
	instead used the next one pointed to by block 1. I've done some testing and
	I can confirm it's not because it's the last entry, it's not because of the
	cluster's value and it's not because of leaving the default name untouched.
	It doesn't seem to be affected by how many directories have been deleted or
	created without rebooting the sampler. This just seems to be normal
	behavior.
	
	Directories cannot contain nested directories. They may only contain files.
	Each directory could theoretically point to up to 112 (7 * 512 / 32) files.
	However, EOS limits this to 100 files per folder.

	Deleting a directory just marks its entry as deleted. They're also never
	shrunk, and their blocks are never freed as long as the directory is not
	deleted.


The file list is made up of 32-byte entries, where each one stores one file's
metadata.

File
	0x00: File name. 16 chars long.
	0x10: Unknown.
	0x11: Bank number (u8). Local to each directory.
	0x12: Cluster address for the file. 16-bit, unsigned.
	0x14: Cluster count. 16-bit, unsigned. Amount of clusters used by the file.
	0x16: Block count. 16-bit, unsigned. Blocks used by the file within the last
		  cluster.
	0x18: Byte count. 16-bit, unsigned. Bytes used by the file within the last
		  block.
	0x1A: File type. 8-bit enum. 0 (free/deleted), 0x80 (system file), 0x81
		  (standard file) and 0x83 (emu3fs calls this "UPD").
	0x1B: 5 bytes which emu3fs calls "props". I have no idea what these do.

	Filenames need not be unique. The actual unique identifier is the bank
	number. Much like directory names, filenames are somewhat inconsistent with
	regards to null terminators.
	EOS doesn't seem to have a problem working with files with names padded with
	nulls.

	Bank number is 0-based, can be freely changed by users (but must be unique),
	and is not expected to be in any order (it's not used as any kind of index
	or anything like that).
	EOS caps bank numbers at 99, allowing only 100 files per directory. At least
	some bank numbers above 99 have special meanings, so it's inadvisable to try
	and use bank numbers above 99 for anything other than those special files.
	Values 0x6D and 0x6B seem to be reserved for "E3 Main Code" and "E3X Main
	Code", respectively.
	I've also encountered banks using values 0x6E and 0x6F. These were both
	named "Backup Bank" (padded out with spaces).

	To get a file's address it's:
		data_section_block_addr * block_size + (cluster_addr - 1) * cluster_size

	To get the actual file size it's:
		(cluster_cnt - (cluster_cnt != 0)) * cluster_size +
		(block_cnt - (block_cnt != 0)) * block_size +
		byte_cnt

	Block count and byte count don't seem to behave in a special way (so 1 is
	still subtracted from the parent count) when set to 0, at least when
	checking file size through EOS' file manager. I still want to check how EOS
	would write a file whose size aligns perfectly to the cluster size. The "E3
	Main Code" file from several library CDs has a size of 1 cluster, 128 blocks
	and 512 bytes. My assumption is it's exactly 128 blocks in size (1 cluster,
	of which 128 blocks are used, and the entire final block is in use). The
	problem is I can't be sure because the file consists entirely of the exact
	same padding as unused parts of the filesystem. At least this confirms the
	byte count can match the block size. Considering this and my latest testing,
	my assumption is the block count would match the number of blocks in a
	cluster and the byte count would match the block size. This would mean
	cluster size is limited by the files' 16-bit block count, and because it
	must be a power of two it would be limited to 32768 (2^15) blocks. This
	means the max cluster shift is 9 on-disk, for a total of 1 << 24.

	Most files are regular E-MU bank files (file type 0x81), except for the two
	reserved system files ("E3 Main Code" and "E3X Main Code"), which were both
	marked with file type 0x80.
	On all CD images I've checked, both system files appear to contain only
	padding.
	emu3fs claims the first file after a deleted file should be marked with file
	type 0x83, but this does not match my testing. Deleting a file with my E4
	had the next file retain its 0x81 file type. Creating a new file just
	overwrote the deleted file entry using a type of 0x81.

	emu3fs initializes props to 0 on EIII filesystems, and to "\0E4B0" on EIV
	ones. EOS sets these to "\0E4B0" on EIV files and to "\0ExB0" on EIIIX banks
	generated when exporting samples as EIIIX. While EOS also gives you the
	option of exporting samples as WAVE or AIFF, neither if those seemed to
	actually do anything.

	File entries are not deleted upon file deletion. They are instead marked as
	deleted (file type of 0) and their props are zeroed out. While the file
	entry's cluster address is not deleted, the clusters are freed on deletion.
	Deleting the parent directory deletes all of its files in the exact same
	way.
